version = '0.0.1'
group= 'com.fonotext'

apply plugin: 'java'
//apply plugin: 'groovy'
apply plugin: 'idea'
apply plugin: 'eclipse'

// Base plugin for task rule clean<task>
apply plugin: 'base'

//[project] Templates plugin
//See also 'http://www.tellurianring.com/projects/gradle-plugins/gradle-templates/apply.groovy'
apply from: 'https://raw.github.com/townsfolk/gradle-templates/master/installation/apply.groovy'

repositories {
	mavenCentral()
	//mavenRepo url: "https://repository.jboss.org/nexus/content/groups/public"
}


// Create a configuration define our dependencies
configurations {
	// New configuration for CXF dependencies.
	cxf
}

ext {
    // CXF version.
    cxfVersion = '2.7.6'

    // Artifacts for CXF dependency.
    cxfArtifacts = [
        'cxf-tools-wsdlto-frontend-jaxws', 
        'cxf-tools-wsdlto-databinding-jaxb', 
        'cxf-tools-common', 
        'cxf-tools-wsdlto-core',
	'cxf-tools-wsdlto-frontend-javascript'
    ]
}

dependencies {
    // Assign CXF dependencies to configuration.
    cxfArtifacts.each { artifact ->
        cxf "org.apache.cxf:$artifact:$cxfVersion"
    }
}

// Custom task to generate Java classes
// from WSDL.
task wsdl2java(type: JavaExec) {
    ext {
        wsdlFile = 'src/wsdl/service-contract.wsdl'
        outputDir = file("$buildDir/generated/cxf")
    }

    inputs.file file(wsdlFile)
    outputs.dir outputDir

    // Main Java class to invoke.
    main = 'org.apache.cxf.tools.wsdlto.WSDLToJava'

    // Set classpath to dependencies assigned
    // to the cxf configuration.
    classpath = configurations.cxf

    // Arguments to be passed to WSDLToJava.
    args '-d', outputDir
    args '-client'
    args '-verbose'
    args '-validate'
    args wsdlFile
}

buildscript {
	//def someVersion = '0.1.0'

	repositories {
		mavenLocal()
		mavenCentral()
	}
	
	dependencies {
		//classpath "::"
	}
}

//Generate self-distributing Gradle wrapper - BTW, simple task definition
task('wrapper', type: Wrapper).configure {
    gradleVersion = '1.6'
}

//sdk version variable - used for IDE setup (later) 
def versionCompatibility = 1.6

//From the Eclipse plugin - manipulates the project file and classpath etc.
eclipse {
	project {
		comment = ""

		buildCommand "org.eclipse.jdt.core.javabuilder"

		natures "com.springsource.sts.grails.core.nature",
			//"org.eclipse.jdt.groovy.core.groovyNature",
			"org.eclipse.jdt.core.javanature",
	        	"com.springsource.sts.gradle.core.nature"
	}

	classpath {
        	containers "com.springsource.sts.gradle.classpathcontainer"
	}
}

//From the idea plugin - manipulates the project file's XML etc.
idea {
	project {
        	jdkName = versionCompatibility

		ipr {
        		withXml { provider ->
            		def node = provider.asNode()
            		
            		// Use GIT
        		def vcsConfig = node.component.find { it.'@name' == 'VcsDirectoryMappings' }
        		vcsConfig.mapping[0].'@vcs' = 'Git'
			
            		// Set Gradle home
            		def gradleSettings = node.appendNode('component', [name: 'GradleSettings'])
            		gradleSettings.appendNode('option', [name: 'SDK_HOME', value: gradle.gradleHomeDir])
        		}
		}
	}
}
